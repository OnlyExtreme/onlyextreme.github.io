# 6-22

今天刚从 HKUST 回来，晚上就打 ABC359。

还是八点开题，A 一分半（怎么这么慢），B 基本到了四分钟，对比起来还行好像。好那么 C 开始出大问题，看起来挺简单（虽然确实也挺简单）但是想不出来，随便写了一个看起来很对的解，发现不对，WA 了三个点，一通手玩数据，改了之后，WA 两个点。我一气之下直接重构，这下思路更清晰了，应该能对。结果，WA 了 $12$ 个点。破防了。

又尝试了一会，实在不行，就放弃了，先看后面的题。

D 是一道字符串题，跟回文有关，但是我 manacher 算法全忘了，所以就跳跳跳。（后来发现题读假了，貌似字符串长度可以支持全部暴力判断回文，但是状压 dp 我也不擅长，悲）。开 E，一眼单调栈，肯定比 D 简单，于是开写，估计就写了不到 $20$ 分钟，而且一次过，幸好前两天复习过单调栈思想，实现起来也很容易，直接维护单调递减的隔板，遇到高的，一个个弹出去然后累计答案就可以了。

然后又回来看 C，最后在还剩一分钟的时候发现了正解，来不及了可恶。

结果是只做出来了 ABE，但是由于 E 的分值比较高，最后是 2000 多名，比上次好点，但不够好。rating 上了 226。

# 6-24

今天复习字符串算法，真的讨厌字符串，用比较现代的方法写了 kmp：

```cpp
// 求解 pi 数组，也就是字串中前缀后缀长度相等的最大长度
vector<int> calc_prefix(string s) {
    int len = s.length();
    vector<int> pi(len);
    for (int i=1; i<=n; i++) {
        int j = pi[i-1];
        while (s[i] != s[j]) j = pi[j-1];
        if (s[i] == s[j]) j++;
        pi[i] = j;
    }
    return pi;
}

// kmp 算法主体，构造一个字符串 pattern + '#' + text，然后求 pi 数组，后面能配上且长度等于 pattern 长的的就是目标位置
vector<int> kmp(string text, string pattern) {
    string cur = pattern + '#' + text;
    int sz1 = text.size(), sz2 = pattern.size();
    vector<int> v;
    vector<int> pi = calc_prefix(cur);
    for (int i=s2+1; i<=s1+s2; i++) {
        if (pi[i] == s2) v.push_back(i - 2 * sz2);  // 这里的 i 是后缀的末尾位置，所以要去掉添加的 pattern 长度和后缀长度
    }
    return v;   // 返回所有匹配位置
}
```

然后看了看 Trie 树，还好，但是 Manacher 真看不动了。

明天打算看看 ARC 的比赛题，看起来挺难的。