# 2024-6-15

终于高考完开始重操旧业了。启动！！！

听从 $Liangs333$ 学长的建议开始玩 AtCoder 了。上午找了个 [可以显示 AtCoder 做题情况的网站](https://kenkoooo.com/atcoder/#/table)，于是开始做 ABC 的题。做了下 ABC357 的题，发现 ABCD 都还挺简单，顺手把乘法逆元学了一下。

### 乘法逆元

由于除法的取模运算无法和加减乘一样处理，所以我们需要全新方法来处理除法。

**定义**： 如果一个线性同余方程 $ax\equiv 1\pmod b$，则 $x$ 称为 $a\bmod b$ 的逆元，记作 $a^{-1}$。 什么意思呢？简而言之就是乘法的逆运算。因为 $ax\equiv 1\pmod b$，所以 **在模 $b$ 意义下**，$x=\frac{1}{a}$，因此在计算 $(a\div b)\bmod p$，就相当于计算 $(a\times b^{-1})\bmod p$，也就只需要计算 $b$ 的逆元即可。

**逆元的求解**：我个人目前喜欢使用费马小定理求解逆元。

因为 $ax\equiv 1\pmod b$

根据费马小定理 $a^{b-1}\equiv 1\pmod b$

所以 $ax\equiv a^{b-1}\pmod b$

所以 $x\equiv a^{b-2}\pmod b$

即可使用快速幂进行求解。这种方法唯一的问题是要求 $b$ 为素数~~（虽然咱们信息竞赛题目大多都是对一个大素数取模）~~。

然后发现当天晚上就有一场 ABC358 果断报名。八点开题，AB 秒了但是也花了 $5$ 分钟，不得不说手速在简单场次太重要了，好多人一分半做完两道，简直离谱。然后 CD 就被卡了一小会，可能因为太久没做题导致手感丢失，犯了各种小错误比如 `long long`，`getchar` 之类的浪费了不少时间，但是 C 的二进制状压暴力和 D 的二分贪心都想出来了，可见基本功并未完全丢失。E 是计数 DP，算法我猜到了但是状态转移方程没能推导出来，刚考完高考就已经快丧失排列组合能力了。但是原题解法确实巧妙，确实没想到。说起来，刚好求组合数这里就要用上午刚学的乘法逆元，看起来在 AtCoder 很常用啊。

不行这次排名在 5030，表现分显示大概在中等偏下一点点，下周争取把 E 也做了。

这上分不比游戏好玩 $QwQ$。   


# 6-16

今天为什么没做题呢？

因为配置这个 Github Pages 搞了基本上一整天，真有点麻烦。先找了个 Jekyll 主题叫做 [Jekyll-Gitbook](https://github.com/sighingnow/jekyll-gitbook)，然后按照官方的 doc 配置了 Ruby, Gem 和 Jekyll 环境，因为网络问题真是基本上搞了一天才搞定，不过最终效果还是不错的。

# 6-17

今天开始用一篇 [一种程序设计竞赛的训练方法](https://www.cnblogs.com/wawcac-blog/articles/12245307.html) 的方法来练。其中提到了在 CF rating 1000-1400 应该先练 AtCoder 的 ABC 比赛的 B，C 题来提升手速。

**ABC356**:

A: 90s, B: 5min, C: 13min, D: 40min, 这时候看了一眼 standings 发现我四道题做完大概花了 85min 可以排名到 $3000$ 左右，还不错，感觉这场比 $ABC358$ 略难。

A 秒了，B 秒了（感觉 5min 有点久了），C 开始没那么一眼，是一个二进制暴力枚举算法（AtCoder 怎么这么喜欢出二进制枚举题）也还好，D 就有点意思了，相当于是一个数学找规律题，让你求: 

$$
\sum_{k=0}^{N}popcount(k\And M)
$$

其中 $popcount$ 指的是二进制表示中 $1$ 的个数。要把这个二进制变形才比较好处理。处理成对 $M$ 中每一个为 $1$ 的二进制位，计算 $0$ 到 $N$ 中二进制同一位也为 $1$ 的个数求和。草稿纸上写一写就会发现它是一个周期数列，然后直接求周期个数再特殊处理剩下的位数就好了。

E 就更难一点。给你一个数列 $A=(A_1,A_2,...,A_n)$，求：

$$
\sum_{i=1}^{N-1} \sum_{j=i+1}^{N} \lfloor \frac{\max(A_i, A_j)}{\min(A_i, A_j)} \rfloor
$$

数据范围是 $2\leq N\leq 2\times 10^5$ 且 $1\leq A\leq 10^6$。

不久就发现复杂度应为 $\log$ 级别的但是想到二分去了，思路有点歪了。正解大概是排序后找到每一个向下取整相等的范围并计算这个范围内有多少个数乘起来就好了。至于如何查询区间内有多少个数，愚蠢的我并没有想到使用**前缀和**。

扫了一眼 F 题目好复杂，看了一眼题解要用线段树。

看懂题目了，大意是每个节点有一个权值，权值之差的绝对值小于 $K$ 的节点间有边，问你对某个节点 $x$，其所在连通块的节点数目是多少。另外这道题要求动态维护这个图（加入或去除节点）。

但是题解没太看懂，大意是维护了两个动态开点线段树，其他看不懂了（逃

学学现代 C++，学学 lambda 表达式和 pb_ds 库，还是很好用的。

### Lambda 表达式

结构如下：

```text
[capture] (parameters) mutable -> return-type {statement}
```

**capture 捕获子句**：规定所使用的变量，以及使用的方法（引用、值），其中 `&` 表示引用而 `=` 表示通过值使用；

```cpp
auto f = [x, y]() -> int { return x + y; };
// 此处按值捕获，那么 x, y 的值只与该表达式出现前的 x, y 值有关，若声明后改变 x, y 的值，输出也不会发生改变

auto g = [&x, &y]() -> int {return x + y; };
// 此处引用捕获，声明后改变 x, y 再调用会获得更新后结果
```

**parameters 参数子句**: 表达式参数，可以使用 `auto` 关键字；

```cpp
auto f = [](int a, int b) -> int {return a + b; };
cout << f(2, 5) << endl;    // 输出 7
```

**mutable 可变规则**：若使用该关键字则可在 lambda 表达式内部改变按值捕获的内容，而外部则没有改变。

```cpp
int a = 0;
auto f = [a]() mutable { ++a; };
// 此处若无 mutable 关键字则 ++a 会编译错误，因为是值捕获，所以理论上无法修改该值，加上 mutable 关键字之后即可修改，而且对外部的 a 变量无影响
```

**Statement Lambda 主体**：基本和普通函数一样，其中可以调用的变量包含：

- 捕获的变量
- 定义的参数
- 本地声明的变量
- 全局变量
- 在一个 `class` 中声明时，若捕获 `this` 则可以访问该对象的成员


然后就是很好用的隐式函数声明：
```cpp
int a = [];
sort(a, a + n, [](int x, int y) {return (x > y);});
// 这样就可以不用写 cmp 函数了
```

### C++ 11 真香
```cpp
int x[] = {1, 2, 3, 4, 5};
for (auto i : x)
    cout << i << endl;

// 以上循环等价于
for (int i = 0; i < 5; i++)
```

### pb_ds 库

全程 Policy-Based Data Structure。其中封装了许多常用数据结构，如哈希 (Hash) 表、平衡二叉树（救命的神），Trie 树，堆（优先队列）等。

**堆（优先队列）：**

所需头文件在 `ext/pb_ds/priority_queue.hpp`，声明方法为 `__gnu_pbds::priority_queue<T>`

成员函数和 `queue` 差不多：`push()`, `pop()`, `top()`, `size()`, `empty()`, `modify(point_iterator, const key)`, `erase(point_iterator)`, `join(__gnu_pbds::priority_queue &other)`

**平衡数：**

所需头文件在 `ext/pb_ds/assoc_container.hpp` 和 `ext/pb_ds/tree_policy.hpp` 

构造方法为

```cpp
__gnu_pbds::tree<std::pair<int, int>,  __gnu_pbds::null_type, std::less<std::pair<int, int> >, __gnu_pbds::rb_tree_tag,  __gnu_pbds::tree_order_statistics_node_update> trr;
```

成员函数包括：`insert(x)`, `erase(x)`, `order_of_key(x)`, `find_by_order(x)`, `lower_bound(x)`, `upper_bound(x)`, `join(x)`, `split(x, b)`, `empty()`, `size()`

嗯，新版 C++ 还是很好用的，感觉一个文件写下去的话太长了，可能得一天分一次。


# 6-18

还是先研究一下昨天 356F 吧，在洛谷上找到了看得懂的中文题解。

显然，如果一条边中跳过了某个点，肯定不优，所以直接考虑相邻的边即可。

动态维护点集 $S$ 和长度大于 $K$ 的相邻边集 $T$。

插入或删除时找到 $S$ 的前驱与后继，对 $T$ 的影响不大，查询时找到 $x$ 在 $T$ 中的前驱和后继，求中间有多少点在 $S$ 内，相当于动态维护下求排名，可以 离散化+树状数组、权值线段树、平衡树，复杂度 $O(n\log n)$。打算都写一遍作为板子的训练。

不行，板子都忘光了，今天就复习这几个数据结构的板子了。

非常好，练了一个下午和半个晚上，顺利地复习完了 树状数组1、树状数组2、线段树1、线段树2（调了一个小时，回来了，都回来了），并查集，拓展域并查集，带权并查集，爽！！！！！！！！

晚上剩下的时间一直在研究 356F，前后想出了两种方法，第一种是用一种带修的并查集来维护，但是貌似不行，因为在删除点的时候可能会让并查集裂开，因为题目中描述的是一个类似直线型结构而并查集在路径压缩之后丧失了这种性质，所以不太行（不过也可以再想想？）；第二种方法就是动态开点权值线段树，然后每个节点维护区间内存在的点的个数 `sum` 和这个区间内所有连通块的最左端点和最右端点 `lm, rm` 然后修就是异或操作（或者取反一样的）并更新对应的区间范围（还没想好），查就是查 `x` 所在区间的最左和最右之间有多少点。貌似最两边还要单独处理，早上抄了一遍树状数组，明天再尝试理解一下。

明天做完这道题要不看看图论？还是打 ABC355 呢？要不复习还是隔天吧，明天做点小题。

说起来我的 esp32 快到了，很快又要多一个项目了~~（逃~~

# 6-19

很好昨天晚上躺床上睡不着就狂想这道题，差不多想清楚了，但是上午一写发现还是一堆问题，调了半天调不出来，找题解一看发现和有一篇差不多，对着一点点看也没找到到底哪里有问题，破防了（有一种回到了高一高二的感觉，尤其是大家都在复健训练）。

决定仔细研读一下 tourists 大佬的 `pb_ds` 代码：

```cpp
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;

typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);

    int q;
    ll k;
    cin >> q >> k;
    const ll inf = 4e18;
    set<ll> starts;
    pbds vals;
    vals.insert(-inf);
    vals.insert(inf);
    starts.insert(inf);
    auto Add = [&](ll x, ll y) {
        if (y - x > k)
            starts.insert(y);
    };
    auto Remove = [&](ll x, ll y) {
        if (y - x > k)
            starts.erase(y);
    };
    while (q--) {
        int op;
        ll x;
        cin >> op >> x;
        if (op == 1) {
            auto it = vals.find(x);
            // 此处 STL 或类似容器在使用 find() 函数的时候若未找到目标元素则返回 [name].end()
            if (it == vals.end()) { // 因此此处是若 x 不存在的情况，此时需要插入 x
                it = vals.lower_bound(x);   // 先找到 x 的后继的指针
                Remove(*prev(it), *it);    // prev(it) 是 x 的前驱的指针，先把前驱后继组成的区间断开
                Add(*prev(it), x);  // 处理 前驱到 x 这段区间是否构成新的长度大于 k 的区间
                Add(x, *it);    // 同理处理 x 到后继这段区间
                vals.insert(x);     // 因为 x 是新加的，所以插入到平衡树里
            } else {    // 此处是 x 存在的情况，此时需要删除 x
                // 这里 it 是 x 所对指针，prev(it) 是前驱，next(it) 是后继
                Remove(*prev(it), *it);        
                Remove(*it, *next(it));     // 这两行把 前驱到 x 和 x 到后继 两个区间分别断开
                Add(*prev(it), *next(it));  // 处理 前驱到后继 这段区间
                vals.erase(it);     // 把 x 从平衡树里删除
            }
        } else {
            auto it = starts.upper_bound(x);    // 先找到左端点大于 x 的第一段长度大于 k 的区间位置
            cout << vals.order_of_key(*it) - vals.order_of_key(*prev(it)) << '\n';  // 因为长度大于 k 的区间内部肯定没有点，所以这里就是右边区间的左端点和左边区间的右端点之间的点的个数
        }
    }

    return 0;
}
```
 
其中板子和命名习惯是自己的，其他全是 tourists 大佬的，以下是分析：

代码中用维护了一个叫做 `starts` 的 `set`，和一个叫 `vals` 的平衡树，根据命名和后面的代码盲猜 `starts` 是维护了所有长度大于 $k$ 的区间的左端点，而 `vals` 则是用平衡树简单维护了一堆点，用于查询排名（也就是区间和）。

在处理操作 $1$ 的时候，若 $x$ 不存在，需要将 $x$ 插入到数轴上，因此需要处理 $x$ 的前驱和后继，将 $x$ 所在的这一段从 $x$ 位置拆开成分别处理，再把 $x$ 放到平衡树里； $x$ 存在时同理，先把两段都处理了再合并起来处理，然后从平衡树里面删掉。

对于操作 $2$，只用找到在 $x$ 两侧最近的 “长度大于 $K$ 的区间” 之间有多少个点即可，先找两边区间，再平衡树查区间和即可。

原来他们做这道题的重点在于维护的是 长度大于 $K$ 的区间而不是小于等于 $K$ 的，确实这样会简单一些。

另外找到了一个[非常好的介绍 pb_ds 平衡树的博客](https://www.cnblogs.com/redacted-area/p/18063265)。

休息了一会开始打 355，计时。

A: 40s, B: 4min, C: 15min, D: 脑子抽了，昨天晚上没睡好，没想出来。前三题还挺快的，还行，但是要记住，**正难则反！正难则反！正难则反！！！**，好几道题了，正着不好做就反着做，D 不好处理交叉的区间组数就用总数 $\frac{n\times (n-1)}{2}$ 再减去不交叉的区间组数，就很好统计了，区间 $i, j$ 不交叉当且仅当 $L_i > R_j$，只要我的左端点比你的右端点还大，我们肯定不交叉。分别排序之后双指针做一遍就完事了。其实还有一种正着做的思路，但是在我看来没有这么好理解，~~一定是因为我太笨了QAQ~~。

今天还顺手把单调队列复习了一下，现在的我肯定是被狠狠地单调队列了（悲